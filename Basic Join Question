Question 1: (Replace ID with Unique_id) https://leetcode.com/problems/replace-employee-id-with-the-unique-identifier/?envType=study-plan-v2&envId=top-sql-50

select unique_id, name 
from Employees E
LEFT JOIN EmployeeUNI U 
ON E.id = U.id

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Question 2: (Product Sales Analysis 1) https://leetcode.com/problems/product-sales-analysis-i/?envType=study-plan-v2&envId=top-sql-50

select product_name, year, price from Product P
JOIN Sales S
ON P.product_id = S.product_id

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Question 3: (Customer Visited but not made any transaction) https://leetcode.com/problems/customer-who-visited-but-did-not-make-any-transactions/description/?envType=study-plan-v2&envId=top-sql-50

select customer_id, Count(V.visit_id) as count_no_trans from Visits V
LEFT JOIN  Transactions T
ON V.visit_id = T.visit_id
where transaction_id IS NULL
group by 1;

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Question 3: (Raising Temperature) https://leetcode.com/problems/rising-temperature/description/?envType=study-plan-v2&envId=top-sql-50

SELECT w1.id
FROM Weather w1, Weather w2
WHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1 AND w1.temperature > w2.temperature;

We can also do this with Common Expression Table method.

with cte1 as
(
    select 
    id, temperature,
    lag(temperature) OVER (order by recordDate) as High_temp
    from Weather
)
select id from cte1
where temperature-High_temp > 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Question 4: (Average Time of process Per machine) https://leetcode.com/problems/average-time-of-process-per-machine/description/?envType=study-plan-v2&envId=top-sql-50
with cte1 as
(
  select  
  machine_id, 
  process_id,
  sum(case when activity_type = 'start' then timestamp end) as start_time,
  sum(case when activity_type = 'end' then timestamp end) as end_time
  from Activity
  group by 1,2
),
cte2 AS
(
    select machine_id, process_id, (end_time-start_time) as Process_time
    from cte1
    group by 1,2
)
select machine_id, ROUND(avg(Process_time),3) AS processing_time from cte2
group by 1;

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Question 5: (Employee Bonus) https://leetcode.com/problems/employee-bonus/description/?envType=study-plan-v2&envId=top-sql-50

select name, bonus 
from Employee E
LEFT JOIN Bonus B
ON E.empId = B.empId
where bonus<1000 or bonus IS NULL;

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Question 6: (Students and examinations) https://leetcode.com/problems/students-and-examinations/description/?envType=study-plan-v2&envId=top-sql-50

select
S.student_id,
S.student_name, 
B.subject_name,
count(E.subject_name) as attended_exams
from Students S
Cross Join Subjects B
LEFT JOIN Examinations E
ON S.student_id = E.student_id AND B.subject_name = E.subject_name
group by 1,2,3
order by 1,2,3

CROSS JOIN:
Students S CROSS JOIN Subjects B: This creates all possible combinations of students and subjects.
LEFT JOIN:
LEFT JOIN Examinations E ON S.student_id = E.student_id AND B.subject_name = E.subject_name:

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Question 7: (Manager with 5 direct Reportee) https://leetcode.com/problems/managers-with-at-least-5-direct-reports/?envType=study-plan-v2&envId=top-sql-50

with cte1 as
(
    select E1.managerId, E2.name as name, count(E2.id) 
    from Employee E1
    JOIN Employee E2
    ON E1.managerId = E2.id
    group by 1 
    having count(E2.id) >= 5
)
select name from cte1

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Question 8: (Confirmation Rate) https://leetcode.com/problems/confirmation-rate/description/?envType=study-plan-v2&envId=top-sql-50

select 
S.user_id,
coalesce(ROUND((count(case when action = 'confirmed' then S.user_id end)/(count(action))),2),0) as confirmation_rate
from Signups S
LEFT JOIN Confirmations C
ON S.user_id = C.user_id
group by 1;



END Of JOIN SECTION >.....................................................................................
